package services;

import java.util.Collection;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import domain.Route;
import domain.Stage;
import domain.StageOrder;
import utilities.AbstractTest;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={
		"classpath:spring/datasource.xml",
		"classpath:spring/config/packages.xml"})
@Transactional
@TransactionConfiguration(defaultRollback = true)
public class RouteServiceTest extends AbstractTest{
	
	// ------------------- Supporting services -------------------
	
	@Autowired
	private RouteService routeService;
	@Autowired
	private StageService stageService;
	
	//----------------------------------------------------
	// POSITIVE TEST CASES
	//----------------------------------------------------
	//A user who is authenticated as an pilgrim must be able to:
	//Register to a route, which implies that he or she registers to every individual stage.
	//
	//A user who is authenticated as an administrator must be able to:
	//List the routes and navigate through their stages.
	//
	//A user who is authenticated as an administrator must be able to:
	//Create his or her routes.
	//With an existing administrator, we want to check if he can create and save a new Route correctly
	//made with existing stages.
	@Test
	public void testCreateAndSaveAdmin(){
		authenticate("admin1");
				
		Route route=routeService.create();
		route.setDescription("description");
		route.setName("name");
		
		routeService.save(route);

		authenticate(null);
	}
	//A user who is authenticated as an administrator must be able to:
	//List his or her routes.
	//
	@Test
	public void testFindByAdmin(){
		authenticate("admin1");
		Collection<Route> all=routeService.findByAdministrator();
		Assert.isTrue(all.size()==3);
		authenticate(null);
	}
	//A user who is authenticated as an administrator must be able to:
	//Delete his or her routes.
	//
	//A user who is authenticated as an administrator must be able to:
	//Display a dashboard with the following information:
	//The list of routes in descending order of registrations.
	//
	//A user who is authenticated as an administrator must be able to:
	//Display a dashboard with the following information:
	//The list of routes, in ascending order of average rating, with an 
	//indication regarding whether they have been deleted.
	//	
	

//	@Test
//	public void testFindOne() {
//		System.out.println("Ruta: " + routeService.findOne(39).getName());
//	}
//	
//	@Test
//	public void testFindAll(){
//		for(Route aux : routeService.findAll())
//			System.out.println("Ruta: " + aux.getName());
//	}
//	
//	@Test
//	public void testFindByPilgrim(){
//		authenticate("customer6");
//		
//		for(Route aux : routeService.findByPilgrim())
//			System.out.println("Ruta: " + aux.getName());
//		
//		authenticate(null);
//	}
//	
//	@Test
//	public void testRoutesByRegistrationsDesc() {
//		for(Route aux : routeService.routesByRegistrationsDesc())
//			System.out.println("Ruta: " + aux.getName());
//	}
//	
//	@Test
//	public void testActiveRoutes() {
//		for(Route aux : routeService.activeRoutes())
//			System.out.println("Ruta: " + aux.getName());
//	}
//	
//	@Test
//	public void testRoutesByAveRatingAsc() {
//		for(Route aux : routeService.routesByAveRatingAsc())
//			System.out.println("Ruta: " + aux.getName());
//	}
//	
////	Error de getters en los atributos derivados
//	@Test
//	public void testRoutesByKeyword(){
//		String keyword = "route";
//		Collection<Route> est = routeService.routesByKeyword(keyword);
//		System.out.println(est.size());
//		for(Route aux : est)
//			System.out.println("Ruta: " + aux.getName());
//	}
//	
//	@Test
//	public void testCreateAndSave(){
//		authenticate("admin1");
//		System.out.println(routeService.findAll().size());
//		
//		Route route = routeService.create();
//		route.setName("testing");
//		route.setDescription("testing");
//		routeService.save(route);
//		
//		System.out.println(routeService.findAll().size());
//		
//		authenticate(null);
//	}
}
