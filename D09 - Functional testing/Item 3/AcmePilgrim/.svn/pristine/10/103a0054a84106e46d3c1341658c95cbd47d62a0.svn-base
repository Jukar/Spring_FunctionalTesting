package controllers.innkeeper;

import java.util.Collection;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import controllers.AbstractController;
import domain.Lodge;
import domain.Stage;
import forms.LodgeForm;
import services.LodgeService;
import services.StageService;

@Controller
@RequestMapping("/lodge/innkeeper")
public class LodgeInnkeeperController extends AbstractController {
	
	// ----------------------- Managed service -----------------------
	
	@Autowired
	private LodgeService lodgeService;
	@Autowired
	private StageService stageService;
	
	// ------------------------- Constructor -------------------------
	
	// --------------------------- Listing ---------------------------
	
	@RequestMapping("/list")
	public ModelAndView listAll() {
		ModelAndView result;
		
		Collection<Lodge> lodges;
		lodges=lodgeService.findByInnkeeper();
		Assert.notNull(lodges);
		
		String requestURI="lodge/innkeeper/list.do";
		result = new ModelAndView("lodge/list");
		result.addObject("lodges",lodges);
		result.addObject("requestURI", requestURI);
		return result;
	}
	
	// --------------------------- Publish ---------------------------
	
	@RequestMapping(value= "/publish", method = RequestMethod.GET)
	public ModelAndView listByKeyword(@RequestParam int lodgeId) {
		ModelAndView result;
		
		try{
			lodgeService.publishLodge(lodgeId);
			result= new ModelAndView("redirect:list.do");
		}catch(Throwable oops){
			result= new ModelAndView("redirect:list.do");
			result.addObject("message", "lodge.commit.error");
		}
		return result;
	}
	
	// ---------------------------- Create ---------------------------
	
	@RequestMapping(value= "/create", method = RequestMethod.GET)
	public ModelAndView create() {
		ModelAndView result;
		
		LodgeForm lodgeForm = new LodgeForm();
		Collection<Stage> stages = stageService.findAll();
		Assert.notNull(stages);
		
		result = createEditModelAndView(lodgeForm);
		result.addObject("lodgeForm",lodgeForm);
		result.addObject("stages",stages);
		return result;
	}
	
	// ----------------------------- Edit ----------------------------
	
	@RequestMapping(value= "/edit", method = RequestMethod.GET)
	public ModelAndView edit(@RequestParam int lodgeId) {
		ModelAndView result;
		
		Lodge lodge = lodgeService.findOne(lodgeId);
		Assert.notNull(lodge);
		
		LodgeForm lodgeForm = lodgeService.construct(lodge);
		result = createEditModelAndView(lodgeForm);
		result.addObject("lodge",lodge);
		return result;
	}
	
	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "save")
	public ModelAndView save(@Valid LodgeForm lodgeForm, BindingResult binding){
		ModelAndView result;
		
		if(binding.hasErrors())
			result = createEditModelAndView(lodgeForm);
		else{
			try{
				Lodge lodge = lodgeService.reconstruct(lodgeForm);
				lodgeService.save(lodge);
				result = new ModelAndView("redirect:../list.do");
			}catch(Throwable oops){
				result = createEditModelAndView(lodgeForm, "lodge.commit.error");
			}
		}
		
		return result;
	}

	
	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "delete")
	public ModelAndView cancel(LodgeForm lodgeForm, BindingResult binding){
		ModelAndView result;
		
		try{
			Lodge lodge = lodgeService.reconstruct(lodgeForm);
			lodgeService.delete(lodge);
			result = new ModelAndView("redirect:../list.do");
		}catch(Throwable oops){
			result = createEditModelAndView(lodgeForm, "lodge.commit.error");
		}
		
		return result;
	}
		
	// ---------------------- Ancillary methods ----------------------
		
	private ModelAndView createEditModelAndView(LodgeForm lodgeForm) {
		ModelAndView result;
		result = createEditModelAndView(lodgeForm, null);
		return result;
	}
	private ModelAndView createEditModelAndView(LodgeForm lodgeForm, String message) {
		ModelAndView result;
		result = new ModelAndView("lodge/innkeeper/edit");
		result.addObject("lodgeForm", lodgeForm);
		result.addObject("message", message);
		return result;
	}
}