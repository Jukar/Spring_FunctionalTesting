package services;

import java.util.Collection;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import domain.Actor;
import domain.Landmark;

import repositories.LandmarkRepository;
import security.Authority;
import security.LoginService;
import security.UserAccount;

@Transactional
@Service
public class LandmarkService {
	//	Managed repository -----------------------------------------	
	@Autowired
	private LandmarkRepository landmarkRepository;
	//	Supporting services ----------------------------------------
	@Autowired
	private ActorService actorService;
	//	Constructor ------------------------------------------------
	//	Simple CRUD methods ----------------------------------------
	public Landmark findOne(int landmarkId){
		return landmarkRepository.findOne(landmarkId);
	}
	public Collection<Landmark> findAll(){
		return landmarkRepository.findAll();
	}
	
	public Landmark create(){
		UserAccount userAccount=LoginService.getPrincipal();
		isCustomer(userAccount);
		Actor actor=actorService.findByUserAccount(userAccount);
		
		Landmark landmark=new Landmark();
		landmark.setActor(actor);
		return landmark;
	}
	
	public void save(Landmark landmark){
		isCustomer(LoginService.getPrincipal());
		Assert.notNull(landmark);
		checkPrincipal(landmark);
		landmarkRepository.save(landmark);
	}
	
	public void delete(Landmark landmark){
		isCustomer(LoginService.getPrincipal());
		Assert.notNull(landmark);
		checkPrincipal(landmark);
		landmarkRepository.delete(landmark);
	}
	
	//	Other business methods -------------------------------------
	public Integer getTotal(){
		isAdmin(LoginService.getPrincipal());
		Integer result=landmarkRepository.getTotal();
		return result;
	}
	
	public Collection<Landmark> findByStage(int stageId){
		Collection<Landmark> result=landmarkRepository.findByStage(stageId);
		return result;
	}
	
	public Collection<Landmark> findByActor(int actorId){
		Collection<Landmark> result=landmarkRepository.findByActor(actorId);
		return result;
	}
	
	public Collection<Object[]> avgperRoute(){
		Collection<Object[]> result=landmarkRepository.avgPerRoute();
		return result;
	}
	
	private void checkPrincipal(Landmark landmark){
		UserAccount userAccount=LoginService.getPrincipal();
		Actor principal=actorService.findByUserAccount(userAccount);
		Actor proper = landmark.getActor();
		Assert.isTrue(principal.getId()==proper.getId());
		
	}
	
	private void isAdmin(UserAccount account) {
		Collection<Authority> authorities= account.getAuthorities();
		Boolean res=false;
		for(Authority a:authorities){
			if(a.getAuthority().equals("ADMIN")) res=true;
		}
		Assert.isTrue(res);
	}
	private void isCustomer(UserAccount account) {
		Collection<Authority> authorities= account.getAuthorities();
		Boolean res=false;
		for(Authority a:authorities){
			if(a.getAuthority().equals("INNKEEPER")) res=true;
			if(a.getAuthority().equals("PILGRIM")) res=true;
		}
		Assert.isTrue(res);
	}
}
