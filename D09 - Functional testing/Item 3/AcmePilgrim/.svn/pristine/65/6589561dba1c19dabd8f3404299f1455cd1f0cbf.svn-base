package services;

import java.util.Collection;
import java.util.Date;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import domain.Booking;
import domain.Invoice;
import repositories.InvoiceRepository;
import security.Authority;
import security.LoginService;
import security.UserAccount;

@Service
@Transactional
public class InvoiceService {
	// ------------------- Managed repository --------------------
	@Autowired
	private InvoiceRepository invoiceRepository;
	
	// ------------------- Supporting services -------------------
	@Autowired
	private BookingService bookingService;
	
	// ----------------------- Constructor -----------------------
	// ------------------- Simple CRUD methods -------------------
	public Invoice findOne(int invoiceId){
		Invoice result=invoiceRepository.findOne(invoiceId);
		return result;
	}
	
	public Collection<Invoice> findAll(){
		Collection<Invoice> result=invoiceRepository.findAll();
		return result;
	}
	
	public Invoice create(){
		isKeeper(LoginService.getPrincipal());
		
		Invoice result = new Invoice();
		result.setMoment(new Date());
		
		return result;
	}
	
	public void delete(Invoice invoice){
		invoiceRepository.delete(invoice);
	}
	
	public void save(Invoice invoice){
		Assert.notNull(invoice);
		Booking book=invoice.getBooking();
		book.setInvoice(invoice);
		
		bookingService.save(book);
		invoiceRepository.save(invoice);
	}
	// ----------------- Other business methods ------------------
	
	
	
	
	
	
	private void isKeeper(UserAccount account) {
		Collection<Authority> authorities= account.getAuthorities();
		Boolean res=false;
		for(Authority a:authorities){
			if(a.getAuthority().equals("INNKEEPER")) res=true;
		}
		Assert.isTrue(res);
	}
}
