package services;

import java.util.ArrayList;
import java.util.Collection;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import domain.Booking;
import domain.Innkeeper;
import domain.Lodge;
import domain.Pilgrim;
import domain.Request;
import domain.Stage;
import forms.LodgeForm;
import security.LoginService;
import utilities.AbstractTest;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={
		"classpath:spring/datasource.xml",
		"classpath:spring/config/packages.xml"})
@Transactional
@TransactionConfiguration(defaultRollback = false)
public class LodgeServiceTest extends AbstractTest{
	
	// ------------------- Supporting services -------------------
	
	@Autowired
	private LodgeService lodgeService;
	@SuppressWarnings("unused")
	@Autowired
	private PilgrimService pilgrimService;
	@Autowired
	private InnkeeperService innkeeperService;
	
	// ------------------- Service under test --------------------
	
	//TODO PENDIENTE
	
	@Test
	public void testFindOne() {
		System.out.println("Posada: " + lodgeService.findOne(39).getName());
	}

	@Test
	public void testFindAll(){
		Collection<Lodge> lodges = lodgeService.findAll();
		for (Lodge lodge : lodges)
			System.out.println("Lodge: " + lodge.getName() + " Dueño: " + lodge.getInnkeeper().getName());
	}
	
	@Test
	public void testCreateAndSave(){
		authenticate("admin1");
		System.out.println(lodgeService.findAll().size());
		
		Lodge lodge = lodgeService.create();
		lodge.setName("testing");
		lodge.setLodgeDescription("testing");
		lodgeService.save(lodge);
		
		System.out.println(lodgeService.findAll().size());
		
		authenticate(null);
	}
	
	@Test
	public void testDelete (){
	}
	
	@Test
	public void testFindAllByStatus() {
		Collection<Lodge> lodges = lodgeService.findAllByStatus("Accepted");
		for (Lodge lodge : lodges){
			System.out.println("Lodge: " + lodge.getName());
			if(lodge.getRequest()!=null)
				System.out.println(" Status: " + lodge.getRequest().getStatus());
		}
	}
	
	@Test
	public void testFindAllPublished() {
		Collection<Lodge> lodges = lodgeService.findAllPublished();
		for (Lodge lodge : lodges)
			System.out.println("Lodge: " + lodge.getName() + " Published: " + lodge.getPublished());
	}
	@Test
	public void testLodgesOrderedByBookingsDesc() {
		Collection<Lodge> lodges = lodgeService.findAll();
		for (Lodge lodge : lodges)
			System.out.println("Lodge: " + lodge.getName() + " Dueño: " + lodge.getInnkeeper().getName());
	}
	@Test
	public void testFindByInnkeeperId() {
		authenticate("XXXXXX");
		
		Innkeeper innkeeper = innkeeperService.findByUserAccount(LoginService.getPrincipal());
		for(Lodge lodge : lodgeService.findByPilgrimId(innkeeper.getId()))
			System.out.println("Lodge: " + lodge.getName() + " Dueño: " + lodge.getInnkeeper().getName());
		
		authenticate(null);
	}
//	@Test
//	public Collection<Lodge> testFindByPilgrimId(int pilgrimId){
//		authenticate("customer6");
//		
//		Pilgrim pilgrim = pilgrimService.findByUserAccount(LoginService.getPrincipal());
//		for(Lodge lodge : lodgeService.findByPilgrimId(pilgrim.getId()))
//			System.out.println("Lodge: " + lodge.getName() + " Dueño: " + lodge.getInnkeeper().getName());
//		
//		authenticate(null);
//	}
	@Test
	public void testFindByPilgrim(){
		authenticate("customer6");
		
		for(Lodge lodge : lodgeService.findByPilgrim())
			System.out.println("Lodge: " + lodge.getName() + " Dueño: " + lodge.getInnkeeper().getName());
		
		authenticate(null);
	}
//	@Test
//	public Collection<Lodge> testFindByInnkeeper(){
//		authenticate("XXXXXX");
//		
//		for(Lodge lodge : lodgeService.findByInnkeeper())
//			System.out.println("Lodge: " + lodge.getName() + " Dueño: " + lodge.getInnkeeper().getName());
//		
//		authenticate(null);
//	}
	@Test
	public void testPublishLodge(int lodgeId){
	}
//	@Test
//	public Lodge reconstruct(LodgeForm lodgeForm){
//	}
//	@Test
//	public LodgeForm construct(Lodge lodge){
//	}
}
