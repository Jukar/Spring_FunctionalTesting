package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import domain.Route;
import domain.Stage;
import domain.StageOrder;
import utilities.AbstractTest;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={
		"classpath:spring/datasource.xml",
		"classpath:spring/config/packages.xml"})
@Transactional
@TransactionConfiguration(defaultRollback = true)
public class RouteServiceTest extends AbstractTest{
	
	// ------------------- Supporting services -------------------
	
	@Autowired
	private RouteService routeService;
	@Autowired
	private StageService stageService;
	
	//----------------------------------------------------
	// POSITIVE TEST CASES
	//----------------------------------------------------
	//A user who is authenticated as an administrator must be able to:
	//Create his or her routes.
	//With an existing administrator, we want to check if he can create and save a new Route correctly
	//made with existing stages.
	@Test
	public void testCreateAndSaveAdmin(){
		authenticate("admin1");
				
		Route route=routeService.create();
		route.setDescription("description");
		route.setName("name");
		
		routeService.save(route);

		authenticate(null);
	}
	//A user who is authenticated as an administrator must be able to:
	//List his or her routes.
	//With an existing administrator, we want to check if he can find all his routes.
	@Test
	public void testFindByAdmin(){
		authenticate("admin1");
		Collection<Route> all=routeService.findByAdministrator();
		Assert.isTrue(all.size()==2);
		authenticate(null);
	}
	//A user who is authenticated as an administrator must be able to:
	//Delete his or her routes.
	//With an existing administrator, we want to check if he can delete one of his routes.
	@Test
	public void testDeleteAdmin(){
		authenticate("admin1");
		Route route=routeService.findOne(52);
		routeService.delete(route);
		authenticate(null);
	}
	//A user who is authenticated as an administrator must be able to:
	//Display a dashboard with the following information:
	//The list of routes in descending order of registrations.
	//With an existing administrator, we want to check if the first of the routes is the expected.
	@Test 
	public void testOrderByRegistrations(){
		authenticate("admin1");
		Collection<Route> all=routeService.routesByRegistrationsDesc();
		List<Route> allOrdered=new ArrayList<Route>();
		for(Route r:all){
			allOrdered.add(r);
		}
		Route route=allOrdered.get(0);
		Assert.isTrue(route.getId()==58);
		authenticate(null);
	}
	//A user who is authenticated as an administrator must be able to:
	//Display a dashboard with the following information:
	//The list of routes, in ascending order of average rating, with an 
	//indication regarding whether they have been deleted.
	//With an existing administrator, we want to check if the first of the routes is the expected.
	//TODO A ver como comprobamos esto, está todo a cero. Hay que crear al menos una puntuación.
//	@Test 
//	public void testOrderByAvg(){
//		authenticate("admin1");
//		Collection<Route> all=routeService.routesByAveRatingAsc();
//		List<Route> allOrdered=new ArrayList<Route>();
//		for(Route r:all){
//			allOrdered.add(r);
//		}
//		Route route=allOrdered.get(0);
//		Assert.isTrue(?¿?¿?);
//		authenticate(null);
//	}
	
	//----------------------------------------------------
	// NEGATIVE TEST CASES
	//----------------------------------------------------
	//A user who is authenticated as an administrator must be able to:
	//Create his or her routes.
	//With an existing pilgrim, we will try to create a route and capture de exception
	@Test(expected=IllegalArgumentException.class)
	public void testCreateAndSavePilgrim(){
		authenticate("csutomer0");
				
		Route route=routeService.create();
		route.setDescription("description");
		route.setName("name");
		
		routeService.save(route);

		authenticate(null);
	}
	//A user who is authenticated as an administrator must be able to:
	//List his or her routes.
	//With an existing administrator, we want to check if he can find all his routes.
	@Test(expected=IllegalArgumentException.class)
	public void testFindByAdminException(){
		authenticate("admin1");
		Collection<Route> all=routeService.findByAdministrator();
		Assert.isTrue(all.size()==3);
		authenticate(null);
	}
	//A user who is authenticated as an administrator must be able to:
	//Delete his or her routes.
	//With an existing administrator, we will try to delete another's route.
	@Test(expected=IllegalArgumentException.class)
	public void testDeleteAdminException(){
		authenticate("admin2");
		Route route=routeService.findOne(52);
		routeService.delete(route);
		authenticate(null);
	}
	//A user who is authenticated as an administrator must be able to:
	//Display a dashboard with the following information:
	//The list of routes in descending order of registrations.
	//With an existing administrator, we want to check if the first of the routes is the expected.
	@Test(expected=IllegalArgumentException.class)
	public void testOrderByRegistrationsException(){
		authenticate("admin1");
		Collection<Route> all=routeService.routesByRegistrationsDesc();
		List<Route> allOrdered=new ArrayList<Route>();
		for(Route r:all){
			allOrdered.add(r);
		}
		Route route=allOrdered.get(0);
		Assert.isTrue(route.getId()==52);
		authenticate(null);
	}
	//A user who is authenticated as an administrator must be able to:
	//Display a dashboard with the following information:
	//The list of routes, in ascending order of average rating, with an 
	//indication regarding whether they have been deleted.
	//With an existing administrator, we want to check if the first of the routes is the expected.
	//TODO A ver como comprobamos esto, está todo a cero. Hay que crear al menos una puntuación.
//		@Test 
//		public void testOrderByAvg(){
//			authenticate("admin1");
//			Collection<Route> all=routeService.routesByAveRatingAsc();
//			List<Route> allOrdered=new ArrayList<Route>();
//			for(Route r:all){
//				allOrdered.add(r);
//			}
//			Route route=allOrdered.get(0);
//			Assert.isTrue(?¿?¿?);
//			authenticate(null);
//		}

}
