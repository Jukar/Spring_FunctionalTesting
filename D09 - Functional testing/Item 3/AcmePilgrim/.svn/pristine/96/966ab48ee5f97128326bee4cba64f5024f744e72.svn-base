package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import domain.Lodge;
import domain.Booking;
import domain.Innkeeper;
import domain.Pilgrim;
import domain.Request;
import domain.Reservation;
import domain.Stage;
import forms.LodgeForm;
import repositories.LodgeRepository;
import security.LoginService;
import security.UserAccount;
import org.springframework.util.Assert;

@Service
@Transactional
public class LodgeService {
	
	// ------------------- Managed repository --------------------
	
	@Autowired
	private LodgeRepository lodgeRepository;
	
	// ------------------- Supporting services -------------------
	
	@Autowired
	private InnkeeperService innkeeperService;
	@Autowired
	private RequestService requestService;
	@Autowired
	private StageService stageService;
	@Autowired
	private PilgrimService pilgrimService;
	@Autowired
	private ReservationService reservationService;
	
	// ----------------------- Constructor -----------------------
	
	// ------------------- Simple CRUD methods -------------------
	
	public Lodge findOne(int lodgeId) {
		return lodgeRepository.findOne(lodgeId);
	}
	
	public Collection<Lodge> findAll(){
		return lodgeRepository.findAll();
	}
	
	public Lodge create(){
		Lodge lodge = new Lodge();
		lodge.setInnkeeper(getInnkeeper());
		lodge.setBookings(new ArrayList<Booking>());
		lodge.setPublished(false);
		return lodge;
	}
	
	public void save(Lodge lodge){
		Assert.notNull(lodge);
		Assert.isTrue(isPrincipal(lodge));
		lodge.setPublished(false);
		lodge = lodgeRepository.save(lodge);
		
		Innkeeper innkeeper = getInnkeeper();
		Collection<Lodge> lodges = innkeeper.getLodges();
		lodges.add(lodge);
		innkeeper.setLodges(lodges);
		innkeeperService.save(innkeeper);
		Stage stage  = stageService.findOne(lodge.getStage().getId());
		Assert.notNull(stage);
		lodges = stage.getLodges();
		lodges.add(lodge);
		stage.setLodges(lodges);
		stageService.saveInnkeeper(stage);
		
	}
	
	public void delete (Lodge lodge){
		Assert.notNull(lodge);
		Assert.isTrue(isPrincipal(lodge));
		
		Lodge lodgeOnDatabase = findOne(lodge.getId());
		Assert.notNull(lodgeOnDatabase);
		
		if(lodgeOnDatabase.getBookings().isEmpty())
			lodgeRepository.delete(lodge);
		else
			Assert.isTrue(false, "No puedes borrar un lodge si ya tienes reservas");
	}
	
	// ----------------- Other business methods ------------------
	
	// REPOSITORIO:
	
	public Collection<Lodge> findAllByStatus(String status) {
		Collection<Lodge> result = lodgeRepository.findAllByStatus(status);
		return (result==null) ? new ArrayList<Lodge>() : result;
	}
	
	public Collection<Lodge> findAllPublished() {
		Collection<Lodge> result = lodgeRepository.findAllPublished();
		return (result==null) ? new ArrayList<Lodge>() : result;
	}
	
	public Collection<Lodge> lodgesOrderedByBookingsDesc() {
		Collection<Lodge> result = lodgeRepository.lodgesOrderedByBookingsDesc();
		return (result==null) ? new ArrayList<Lodge>() : result;
	}
	
	public Collection<Lodge> findByInnkeeperId(int innkeeperId) {
		Collection<Lodge> result = lodgeRepository.findByInnkeeperId(innkeeperId);
		return (result==null) ? new ArrayList<Lodge>() : result;
	}
	
	public Collection<Lodge> findByPilgrimId(int pilgrimId){
		Collection<Lodge> result = lodgeRepository.findByPilgrimId(pilgrimId);
		return (result==null) ? new ArrayList<Lodge>() : result;
	}
	
	public Collection<Lodge> findByPilgrim(){
		Pilgrim pilgrim = getPilgrim();
		return findByPilgrimId(pilgrim.getId());
	}
	
	public Collection<Lodge> findByInnkeeper(){
		Innkeeper innkeeper = getInnkeeper();
		return findByInnkeeperId(innkeeper.getId());
	}

	// CASOS DE USO:
	
// TODO Probar, borrar explicaciones
	public void crearReserva(Booking booking){
		Date arrivalDate = booking.getArrivalDate();
		int numberOfNights = booking.getNumberOfNights();
		int numberOfBeds = booking.getNumberOfBeds();
		Lodge lodge = booking.getLodge();

		Assert.isTrue(lodge.getNumberBeds() >= numberOfBeds, "El hotel no tiene esa capacidad");
		
		while(numberOfNights>0){		// Creo o modifico tantas reservas como días quiero reservar
			Reservation reservation = reservationService.findByDateAndLodgeId(arrivalDate, lodge.getId());
									
			if(reservation==null){		// Si no existe la creo con las camas que quiero para el día X
				reservation = reservationService.create();
				reservation.setDayBooked(arrivalDate);
				reservation.setReservedBeds(numberOfBeds);
				reservation.setLodge(lodge);
			}else{						// Si existe compruebo que tengo las camas disponibles para día X
				Assert.isTrue(lodge.getNumberBeds() >= reservation.getReservedBeds() + numberOfBeds, "it's full mate");

				reservation.setReservedBeds(reservation.getReservedBeds() + numberOfBeds);
			}
			
			reservationService.save(reservation);
			arrivalDate = new Date(arrivalDate.getTime() + 86400000);		// Fecha + 1 Día en ms
			numberOfNights--;
		}
	}
	
// TODO Probar, borrar explicaciones
	public void cancelarReserva(Booking booking){
		Date arrivalDate = booking.getArrivalDate();
		int numberOfNights = booking.getNumberOfNights();
		int numberOfBeds = booking.getNumberOfBeds();
		Lodge lodge = booking.getLodge();
		
		Assert.isTrue(arrivalDate.compareTo(new Date(new Date().getTime()-86400000)) > 0, "less than 24h for arrival");
		
		while(numberOfNights>0){		// borro o modifico tantas reservas como días quiero cancelar
			Reservation reservation = reservationService.findByDateAndLodgeId(arrivalDate, lodge.getId());
			Assert.isNull(reservation, "Si estas borrando es porque existe");
			
			if(reservation.getReservedBeds()==numberOfBeds){	// Si el booking es unico para el día X, borro
				reservationService.delete(reservation);
			}else{						// Si hay más de una reserva, solo borro las camas que tenía reservadas
				Assert.isTrue(lodge.getNumberBeds() >= reservation.getReservedBeds() + numberOfBeds, "it's full mate");

				reservation.setReservedBeds(reservation.getReservedBeds() - numberOfBeds);
				reservationService.save(reservation);
			}
			
			arrivalDate = new Date(arrivalDate.getTime() + 86400000);		// Fecha + 1 Día en ms
			numberOfNights--;
		}
	}
	
	public void publishLodge(int lodgeId){
		Lodge lodge = findOne(lodgeId);
		Request request = requestService.findByLodge(lodge.getId());
		Assert.notNull(lodge);
		Assert.notNull(request);
		Assert.isTrue(isPrincipal(lodge));
		System.out.println("Funcionaria si Lodge tuviera Request en el Populate xD"); 
		Assert.isTrue(request.getStatus()=="ACCEPTED");
		lodge.setPublished(true);
		lodgeRepository.save(lodge);
	}
	
	public Lodge reconstruct(LodgeForm lodgeForm){
		Assert.notNull(lodgeForm);
		Lodge result;
		if(lodgeForm.getLodgeId()==null){
			result = create();
			result.setStage(lodgeForm.getStage());
		}else{
			result = lodgeRepository.findOne(lodgeForm.getLodgeId());
			Assert.notNull(result, "Nunca debe ser null");
			if(!result.getBookings().isEmpty() && lodgeForm.getStage()!=result.getStage())
				Assert.isTrue(false, "No cambiar de Stage si existen Bookings");
			else
				result.setStage(lodgeForm.getStage());
		}
		result.setName(lodgeForm.getName());
		result.setAddress(lodgeForm.getAddress());
		result.setCoordinates(lodgeForm.getCoordinates());
		result.setWebSite(lodgeForm.getWebSite());
		result.setContactPhone(lodgeForm.getContactPhone());
		result.setLodgeDescription(lodgeForm.getLodgeDescription());
		result.setNumberBeds(lodgeForm.getNumberBeds());
		result.setPricePerNight(lodgeForm.getPricePerNight());
		
		return result;
	}
	
	public LodgeForm construct(Lodge lodge){
		LodgeForm result= new LodgeForm();
		
		result.setName(lodge.getName());
		result.setAddress(lodge.getAddress());
		result.setCoordinates(lodge.getCoordinates());
		result.setWebSite(lodge.getWebSite());
		result.setContactPhone(lodge.getContactPhone());
		result.setLodgeDescription(lodge.getLodgeDescription());
		result.setNumberBeds(lodge.getNumberBeds());
		result.setPricePerNight(lodge.getPricePerNight());
		result.setStage(lodge.getStage());
		
		result.setLodgeId(lodge.getId());
		return result;
	}
	
	// AUXILIARES:
	
	private Innkeeper getInnkeeper(){
		UserAccount userAccount = LoginService.getPrincipal();
		Innkeeper result = innkeeperService.findByUserAccount(userAccount);
		Assert.notNull(result);
		return result;
	}
	
	private Pilgrim getPilgrim(){
		UserAccount userAccount = LoginService.getPrincipal();
		Pilgrim result = pilgrimService.findByUserAccount(userAccount);
		Assert.notNull(result);
		return result;
	}

	private Boolean isPrincipal(Lodge lodge){
		Boolean result = false;
		Innkeeper innkeeper = getInnkeeper();
		result = innkeeper.getId() == lodge.getInnkeeper().getId();
		return result;
	}
}